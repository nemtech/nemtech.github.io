#####
Block
#####

The central element of every cryptocurrency is a public ledger called the blockchain, which links blocks together.

.. Each NEM block can contain up to ``N`` :doc:`transactions <transaction>`.

Since the blocks in the chain are ordered, the complete transaction history is held in the blockchain. Subsequent blocks in the blockchain have increasing heights that differ by one.

Blocks are stored in a database as permanent medium. NEM calls the first block in the chain the nemesis block.

NEM blocks complete every ``15`` seconds, making transactions confirm quickly enough for everyday use.

**************
Block creation
**************

Blocks are created by :doc:`accounts <account>`. The process of creating new blocks is called :doc:`harvesting <harvesting>`. The harvesting account - called the harvester - gets the :ref:`fees <fees>` for the transactions in the block and :doc:`inflation <inflation>`. This gives the harvester an incentive to add as many transactions to the block as possible.

******
Guides
******

.. postlist::
    :category: Block
    :date: %A, %B %d, %Y
    :format: {title}
    :list-style: circle
    :excerpts:
    :sort:

*******
Schemas
*******

.. note:: Configuration parameters are :properties:`editable <config-network.properties>`. Public network configuration may differ.

.. _block-header:

BlockHeader
===========

Serialization of the block header.

**Inlines:**

* :ref:`VerifiableEntity<verifiable-entity>`
* :ref:`EntityBody<entity-body>`

.. csv-table::
    :header: "Property", "Type", "Description"
    :delim: ;
    :widths: 30 30 40

    height; uint64; Height of the blockchain. Each block has a unique height. Subsequent blocks differ in height by 1.
    timestamp; :schema:`Timestamp <types.cats#L5>`; Number of seconds elapsed since the creation of the nemesis block.
    difficulty; uint64; Average difficulty divided by the average block creation time for the last ``60`` blocks. If the new difficulty is more than 5% greater or smaller than the difficulty of the last block, then the change is capped to 5%. Additionally, difficulties are kept within certain bounds. The new difficulty is clamped to the boundaries if it is greater than 10\ :sup:`15` or smaller than 10\ :sup:`13`\ .
    feeMultiplier; uint32; Fee multiplier applied to transactions contained in block.
    previousBlockHash; :schema:`Hash256 <types.cats#L9>`; Hash of the previous block.
    blockTransactionHash; :schema:`Hash256 <types.cats#L9>`; Transactions included in a block are hashed forming a |merkle|. The root of the tree summarizes them.
    blockReceiptsHash; :schema:`Hash256 <types.cats#L9>`; Collection of :doc:`receipts <receipt>` are hashed into a |merkle| and linked to a :doc:`block <block>`. The block header stores the root hash.
    stateHash; :schema:`Hash256 <types.cats#L9>`;  For each block, the state of the blockchain is stored in RocksDB, forming a |patricia|. The root of the tree summarizes the state of the blockchain for a given block.
    beneficiary; :schema:`Key <types.cats#L11>`; Public key of the optional beneficiary designated by harvester.

.. |merkle| raw:: html

    <a href="https://en.wikipedia.org/wiki/Merkle_tree" target="_blank">merkle tree</a>

.. |patricia| raw:: html

   <a href="https://en.wikipedia.org/wiki/Radix_tree" target="_blank">patricia tree</a>

**Version**: The higher byte represents the network identifier.

.. csv-table::
    :header: "Id", "Description"
    :delim: ;

    0x68 (MAIN_NET); Public main network
    0x98 (TEST_NET); Public test network
    0x60 (MIJIN); Private network
    0x90 (MIJIN_TEST); Private test network

**Type**: The type of the block.

.. csv-table::
    :header: "Id", "Description"
    :delim: ;

    0x8043; Nemesis block
    0x8143; Block

.. _verifiable-entity:

VerifiableEntity
================

Serialization of an entity that should be signed by an account.

.. csv-table::
    :header: "Property", "Type", "Description"
    :delim: ;

    signature; :schema:`Signature <types.cats#L12>`; Entity signature generated by the signer.

.. _entity-body:

EntityBody
==========

Serialization of an entity. An entity could be a block, a :doc:`transaction <transaction>` or a :doc:`receipt <receipt>`.

.. csv-table::
    :header: "Property", "Type", "Description"
    :delim: ;

    signer; :schema:`Key <types.cats#L11>`; Public key of the signer of the entity.
    version; uint16; Version of the structure.
    type; uint16; Entity type. For transaction types, see :ref:`transaction types <transaction-types>`.
